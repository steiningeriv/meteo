(function() {
    var j, c, f, b, h, a, g = "1.001";
    var k = function() {
        j = $("meta[name=WeatherSTEM-api-key]").attr("content");
        if (!j) {
            return alert("No WeatherSTEM API key found")
        }
        station = $("meta[name=WeatherSTEM-station]").attr("content");
        if (station == "closest") {
            f = station;
            get_geolocation(function(o) {
                h = o.lat;
                a = o.lon;
                c = "api";
                update()
            });
            return
        } else {
            if (station == "random") {
                f = station;
                c = "api"
            } else {
                if (station == "assigned") {
                    var m = i("station");
                    if (!m) {
                        f = "random"
                    } else {
                        f = m
                    }
                    c = "api"
                } else {
                    if (station.match("@")) {
                        var l = station.split("@");
                        var n = l[1];
                        l = n.split(".");
                        c = l[0];
                        f = station
                    } else {
                        if (station) {
                            var l = station.split("/");
                            c = l[0];
                            if (c == "leonschools") {
                                c = "leon"
                            }
                            f = l[1]
                        } else {
                            return alert("No WeatherSTEM station found")
                        }
                    }
                }
            }
        }
        update();
        setInterval(update, 60000)
    };
    var e = function(n, m, l) {
        if (!c) {
            c = "m"
        }
        $.ajax({
            type: "POST",
            url: "//" + c + ".weatherstem.com/api",
            data: JSON.stringify(n),
            dataType: "json",
            success: function(o, q, p) {
                if (o.error) {
                    if (l) {
                        return l(o.error)
                    } else {
                        return alert("An error was encountered: " + o.error)
                    }
                }
                m(o)
            },
            error: function(o, q, p) {
                console.log(o + ":" + p)
            }
        })
    };
    this.get = function(m, l) {
        var n = {
            api_key: j,
            stations: [f],
            lat: h,
            lon: a
        };
        e(n, function(o) {
            b = o;
            m(o)
        }, l)
    }
    ;
    this.get_geolocation = function(l) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(m) {
                _lat = m.coords.latitude;
                _lon = m.coords.longitude;
                l({
                    lat: _lat,
                    lon: _lon
                })
            })
        }
    }
    ;
    this.getValueFromSensor = function(m) {
        for (var l = 0; l < b[0].record.readings.length; l++) {
            if (b[0].record.readings[l].sensor == m) {
                return b[0].record.readings[l].value
            }
        }
    }
    ;
    this.update = function() {
        if ($("*[data-sensor]").length) {
            get(d)
        }
    }
    ;
    var d = function() {
        $("*[data-sensor]").each(function() {
            var m = $(this).attr("data-sensor");
            $(this).text(getValueFromSensor(m))
        });
        $("*[data-station-property]").each(function() {
            var m = $(this).attr("data-station-property");
            $(this).text(b[0].station[m])
        });
        $("*[data-domain-property]").each(function() {
            var m = $(this).attr("data-domain-property");
            $(this).text(b[0].station.domain[m])
        });
        $("*[hi-property]").each(function() {
            var m = $(this).attr("hi-property");
            $(this).text(b[0].record.hilo.max)
        });
        $("*[lo-property]").each(function() {
            var m = $(this).attr("lo-property");
            $(this).text(b[0].record.hilo.min)
        });
        if (f == "random") {
            var l = b[0].station.handle + "@" + b[0].station.domain.handle + ".weatherstem.com";
            f = l
        }
    };
    var i = function(n) {
        var m = "(?:; )?" + n + "=([^;]*);?";
        var l = new RegExp(m);
        if (l.test(document.cookie)) {
            return decodeURIComponent(RegExp["$1"])
        } else {
            return null
        }
    };
    window.WeatherSTEM = this;
    $(document).ready(function() {
        k()
    })
}());
